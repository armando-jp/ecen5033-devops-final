### 11/23/2021
Currently we have an express server (writen in JS), an mqtt mosquito broker, and
and mongo database.

Next up we need to flesh out the functionality of the JS server:
1) Package node data packet in JSON format.
---> {"temperature":180,"humidity":50,"message":"Hello Cloud","time":"2021-11-24-13-56-10"}
2) Test sending data packet to MQTT server.
---> Completed using MQTT mosquitto command line tool.
3) Test receiving JSON msg in express server
---> Was able to receive and parse MQTT message.
4) Create entry in database with conents from JSON msg.
5) Verify that the entry is in the database by reading it, then printing it.
---> This is done by running `docker exec -it mongo sh` after the
docker-compose up is run (and sucessfully sending MQTT message via shell
client). Once in the shell, run `mongo`. Once in the mongo shell tool, use `show
dbs` to view all databases, you should see `Test`. Run `use test`, finally run
`db.devices.find()` to view all entries. NOTE: For some reason, express server
will not connecto to mongodb if we don't delete the mongo directory before
restarting the containers... not sure why this is the case.

After that, upon refresh of webpage, we need to update the displayed information
with the latest database entry.
1) Use templating to update the contents of the webpage with data from database.
---> accomplished using EJS templating engine
2) By default, handle the case where no database data is available/none exists
(show the user some placeholder data).
---> Has been handled. Template gets updated with dummy data.
3) Upon reserving the client the webpage, obtain new database sensor entry and
display that information.
---> We did it.

Once this is done, work on Kubernetes deployment to GCloud.

### 11/24/2021
Currently the application works in the docker-compose context. However, we now 
need to translate the application to work in a kubernetes context. This means
we need to refresh on those kubernetes concepts. The goal now is to run the 
applciation using kubernetes locally. 

1) Build our web server using the following command: `docker build -t
armandojp/iot-web server .` then push to dockerhub using `docker push
armandojp/iot-web-server`


--->kubectl apply -f mongo-service.yaml,mosquitto-service.yaml,web-service.yaml,mongo-deployment.yaml,mongo-claim0-persistentvolumeclaim.yaml,mosquitto-deployment.yaml,web-deployment.yaml,mosquitto-configmap.yaml
kubectl delete -f kubectl apply -f mongo-service.yaml,mosquitto-service.yaml,web-service.yaml,mongo-deployment.yaml,mongo-claim0-persistentvolumeclaim.yaml,mosquitto-deployment.yaml,web-deployment.yaml,mosquitto-configmap.yaml

--->kubectl delete service [service_name]
--->kubectl delete pods [pod_name]
--->kubectl delete persistentvolumeclaim [volume_name]



key words: service, deployment, configmap
... I think we need the configmap to setup mosquitto properly,




### 11/25/2021

OK. SO, the kubernetes application is now running up in the C~L~O~U~D.
How was this even accomplished?

Created the k8s scripts using 'kompose' (modify docker-compose file first). Then
need to modify the resulting k8 files (like the mosquitto config file using
configmap... or adding the loadbalancer type to the web and mosquitto -service files).
Uploaded my project git repo to github.


1) Go to Google Dev Dashboard
2) Navigate to project 'ecen-5033-devops-project'
3) Go to 'kubernetes engine'
4) Connect to terminal/console
5) Do normal kubernetes stuff
`kubectl get services`
`kubectl get pods`
`kubectl get persistentvolumeclaim`
`kubectl get svc`
6) Our current deployment has the following IP addresses:
mosquitto: 35.188.96.125
web: 34.71.145.113



### The next thing we need to do is document:
1) the k8s aspect of this project
--- make a diagram of the kubernetes system
--- comment the kubernetes deployment files
2) document the flow of the entire project (from development to deployment)
3) document the google cloud settings/configuration.

### After all of this do the ESP32 programming ... (not a super high priority)
